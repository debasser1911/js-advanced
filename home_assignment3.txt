------------------------
Задача 3.1
------------------------
Создать "Класс"/функцию конструктор с 3 полями и 2мя методами которые работают с this

Описание класса:

Pizza
 - toppings []
 - bortik Boolean
 - size String
 - makePizza (return a string that lists all Pizza fields in format - "{size} Pizza with {bortik} and with toppings {toppings})
 - packPizza (return a string like "Pizza packed into {size}box)

 Подумайте и предложите как можно улучшить модель/абстракцию

 Создайте 2 пиццы - одну с разными топингами, одну с бортиком и одну без.
 Пример создания пиццы: var myPizza = new Pizza(['onion', 'bekon', 'tomato'], true, 'big')

 Вызовите методы у созданных обьектов.
------------------------
Задача 3.2
------------------------
Написать функцию applyAll(func, arg1, arg2...), которая получает функцию func и произвольное количество аргументов.

Она должна вызвать func(arg1, arg2...), то есть передать в func все аргументы, начиная со второго, и возвратить результат.

Например:

// Применить Math.max к аргументам 2, -2, 3
console.log( applyAll(Math.max, 2, -2, 3) ); // 3

// Применить Math.min к аргументам 2, -2, 3
alert( applyAll(Math.min, 2, -2, 3) ); // -2
Область применения applyAll, конечно, шире, можно вызывать её и со своими функциями:


function sum() { // суммирует аргументы: sum(1,2,3) = 6
  return [].reduce.call(arguments, function(a, b) {
    return a + b;
  });
}

function mul() { // перемножает аргументы: mul(2,3,4) = 24
  return [].reduce.call(arguments, function(a, b) {
    return a * b;
  });
}

console.log( applyAll(sum, 1, 2, 3) ); // -> sum(1, 2, 3) = 6
console.log( applyAll(mul, 2, 3, 4) ); // -> mul(2, 3, 4) = 24

------------------------
Задача 3.3
------------------------

Привести пример использования привязки контекста с помощью call/apply/bind